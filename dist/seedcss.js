/*! 
 * Seed CSS (seed-css) 
 * A light-weight and mobile first CSS boilerplate. 
 * @author Rogerio Taques (hello@abtz.co) 
 * @copyright 2016-2019, Rogerio Taques (hello@abtz.co) 
 * @license MIT 
 * @version 2.2.1 
 */ 

 "use strict";!function(){function t(t,e){e=e||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),n}return"function"!=typeof window.CustomEvent&&(t.prototype=window.Event.prototype,void(window.CustomEvent=t))}();
"use strict";var seedFileUpload=function(){var e=function(e){e&&e.preventDefault();var t,i=!1,n=this,l=n.nextElementSibling;n.files&&n.files.length>1?i=(n.getAttribute("data-multiple")||"{count} files").replace("{count}",n.files.length):n.value.trim().length>0&&(i=n.value.split("\\").pop()),i&&(l.querySelector(".input").innerHTML=i),""!==n.value&&(t=new CustomEvent("file.chosen"),n.parentNode.classList.add("chosen"),n.dispatchEvent(t))},t=document.querySelectorAll('.seed-file > [type="file"]');null!==t&&t.forEach(function(t,i){var n=t.nextElementSibling,l=n.querySelector(".cancel"),r=t.getAttribute("data-empty")||"No file chosen";n&&(t.getAttribute("id")&&t.getAttribute("id")!==n.getAttribute("for")?n.setAttribute("for",t.getAttribute("id")):n.getAttribute("for")&&!t.getAttribute("id")?t.setAttribute("id",n.getAttribute("for")):(t.setAttribute("id","file-input-"+i),n.setAttribute("for","file-input-"+i)),l&&l.addEventListener("click",function(e){e&&e.preventDefault();var i=t.getAttribute("data-empty")||"No file chosen";t.value="",t.parentNode.classList.remove("chosen"),n.querySelector(".input").innerHTML=i,seedCustomEvent=new CustomEvent("file.removed"),t.dispatchEvent(seedCustomEvent)}),n.querySelector(".input").innerHTML=r,t.addEventListener("change",e))})};"undefined"!=typeof module?module.exports.fileUpload=fileUpload:("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.fileUpload=seedFileUpload);
"use strict";var fnOpen,fnClose,fnEsc,seedModal=function(e){var n={trigger:'[role="modal"]',classAnimation:{open:"bounceInDown",close:"bounceOutUp"}};e=Object.assign({},n,e);var o=document.querySelectorAll(".modal"),t=document.querySelectorAll(e.trigger);return fnClose=function(n){if(n){var o,t=document.querySelector("html"),s=n.querySelector(".modal-window");s&&(document.removeEventListener("keydown",fnEsc),s.classList.replace(e.classAnimation.open,e.classAnimation.close),n.classList.add("delay-1s"),n.classList.replace("fadeIn","fadeOut"),setTimeout(function(){o=new CustomEvent("modal.closed"),n.dispatchEvent(o),n.classList.add("hide"),t.style.overflow="",n.classList.remove("delay-1s","fadeOut"),s.classList.replace(e.classAnimation.close,e.classAnimation.open)},600))}},fnOpen=function(n){if(n){var o,t=document.querySelector("html"),s=n.querySelector(".modal-window");fnEsc=function(e){var o=e.keyCode||e.which;27===o&&fnClose(n)},s&&(document.addEventListener("keydown",fnEsc),n.style.display="",n.classList.add("animated","fadeIn","fast"),s.classList.add("animated",e.classAnimation.open),n.classList.remove("hide"),t.style.overflow="hidden",setTimeout(function(){o=new CustomEvent("modal.opened"),n.dispatchEvent(o)},100))}},null!==o&&o.forEach(function(e,n){var o=e.querySelectorAll('[role="modal-dismiss"]');e.addEventListener("click",function(){fnClose(e)}),e.show=function(){fnOpen(e)},e.hide=function(){fnClose(e)},null!==o&&o.forEach(function(n,o){n.addEventListener("click",function(n){n&&(n.preventDefault(),n.stopPropagation()),fnClose(e)})})}),null!==t&&t.forEach(function(e,n){e.addEventListener("click",function(n){n&&n.preventDefault();var o=e.getAttribute("data-modal-id");if(null!==o){var t=document.querySelector("#".concat(o));fnOpen(t)}})}),t=void 0,{get:function(e){if("string"==typeof e){var n=!1;return o.forEach(function(o){if(o.id===e.replace(/^#/,""))return void(n=o)}),n}return"undefined"!=typeof o[e]&&o[e]}}};"undefined"!=typeof module?module.exports.seedModal=seedModal:("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.modal=seedModal);
"use strict";var seedOffCanvas=function(){var e=function(e,n){var t,o=document.querySelector("#".concat(e.replace(/^#/,""))),a=n||document.querySelector('[role="offcanvas"][data-id="'.concat(e.replace(/^#/,""),'"]'));null!==o&&(o.classList.toggle("open"),o.classList.contains("open")?(null!==a&&a.classList.add("triggered"),document.querySelector("html").style.overflow="hidden"):(document.querySelectorAll('[role="offcanvas"][data-id="'.concat(e.replace(/^#/,""),'"]')).forEach(function(e){e.classList.remove("triggered")}),document.querySelector("html").style.overflow=""),setTimeout(function(){t=o.classList.contains("open")?new CustomEvent("canvas.opened"):new CustomEvent("canvas.closed"),o.dispatchEvent(t)},300))},n=function(n){n&&n.preventDefault(),e(n.currentTarget.getAttribute("data-id")||"offcanvas",n.currentTarget)},t=document.querySelectorAll('[role="offcanvas"]'),o=document.querySelectorAll(".offcanvas");return null!==t&&t.forEach(function(e,t){e.addEventListener("click",n)}),null!==o&&o.forEach(function(n,t){n.open=function(){e(n.getAttribute("id")||"offcanvas")},n.close=function(){}}),{get:function(e){if("string"==typeof e){var n=!1;return o.forEach(function(t){if(t.id===e.replace(/^#/,""))return void(n=t)}),n}return"undefined"!=typeof canvas[e]&&canvas[e]}}};"undefined"!=typeof module?module.exports.seedOffCanvas=seedOffCanvas:("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.offCanvas=seedOffCanvas);
"use strict";var seedScroll=function(e){var t=null,n=null,o=0,i={spyScrollSelector:"nav a.smooth",revealElementSelector:".reveal",revealSpaceOffset:.2,revealWhenVisible:"visible",revealSingleAnimation:"visible-once",revealWhenHidden:"hidden",gutter:50},l=function(e){t.forEach(function(e){e.classList.remove("active")}),e&&e.classList.add("active")},r=function(e){var t=document.body.getBoundingClientRect(),n=e.getBoundingClientRect();return{top:Math.ceil(n.top-t.top),left:Math.ceil(n.left-t.left)}},c=function(n){if(window.scrollY===o){var i=new CustomEvent("scroll.complete");document.dispatchEvent(i)}if(t){var c=r(t[0]);window.scrollY<c.top&&l(),t.forEach(function(t,n){try{var o=t.getAttribute("href")||t.getAttribute("data-target"),i=document.querySelector(o),c=r(i);if(c.top-e.gutter<=window.scrollY)return void l(t)}catch(d){}})}"function"==typeof window.oldOnscroll&&window.oldOnscroll(n)},d=function(t){t&&t.preventDefault();var n=t.currentTarget.getAttribute("href")||t.currentTarget.getAttribute("data-target");if(n){var i=document.querySelector(n);o=r(i).top-e.gutter,window.scrollTo({behavior:"smooth",left:0,top:o})}},a=function(){var t=function(){return{width:window.document.documentElement.clientWidth,height:window.document.documentElement.clientHeight}},o=function(){return{x:window.pageXOffset,y:window.pageYOffset}},i=function(e){var t=e,n=0,o=0,i=t.offsetWidth,l=t.offsetHeight;do isNaN(t.offsetTop)||(n+=t.offsetTop),isNaN(t.offsetLeft)||(o+=t.offsetLeft);while(null!==(t=t.offsetParent));return{top:n,left:o,height:l,width:i}},l=function(n){var l=t(),r=o(),c=i(n),d=e.revealSpaceOffset,a=function(){var e=c.top+c.height*d,t=c.left+c.width*d,n=c.left+c.width-c.width*d,o=c.top+c.height-c.height*d,i=r.y+0,a=r.x+0,s=r.y-0+l.height,f=r.x-0+l.width;return e<s&&o>i&&t>a&&n<f};return a()},r=function(){if(n)for(var t=0;t<n.length;t+=1)l(n[t])?(e.revealWhenVisible&&n[t].classList.add(e.revealWhenVisible),e.revealWhenHidden&&n[t].classList.remove(e.revealWhenHidden)):n[t].classList.contains(e.revealSingleAnimation)===!1&&(e.revealWhenHidden&&n[t].classList.add(e.revealWhenHidden),e.revealWhenVisible&&n[t].classList.remove(e.revealWhenVisible))},c=function(e){r()};window.addEventListener("scroll",c,!1),window.addEventListener("resize",c,!1)};return window.oldOnscroll=window.onscroll,window.onscroll=c,e=Object.assign({},i,e),t=document.querySelectorAll(e.spyScrollSelector),n=document.querySelectorAll(e.revealElementSelector),null!==t&&t.forEach(function(e,t){e.addEventListener("click",d)}),n&&a(),{}};"undefined"!=typeof module?module.exports.seedScroll=seedScroll:("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.scroll=seedScroll);
"use strict";var seedTextarea=function(){var e=document.querySelectorAll(".field > textarea");null!==e&&e.forEach(function(e,t){var a=0,r=e.parentNode,n=r.querySelector('[role="counter"]'),o=n.getAttribute("data-template")||"Typed %a out of %b. Remaining %c.",d=function(){var t=e.value.replace(/[\n\r]/g,"").length,r=a-t,d=Math.floor(.1*a);n.innerHTML=o.replace("%a",t).replace("%b",a).replace("%c",r<=d?'<span class="red" >'.concat(r,"</span>"):r)};a=e.getAttribute("maxlength"),a&&(a=parseInt(a),"keypress keydown keyup".split(" ").forEach(function(t){e.addEventListener(t,d,!0)}),d())})};"undefined"!=typeof module?module.exports.seedTextarea=seedTextarea:("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.textArea=seedTextarea);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
