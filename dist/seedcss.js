/** 
 * Seed CSS (seed-css) 
 * A light-weight, mobile first and responsive CSS boilerplate. 
 * @author Rogerio Taques (hello@abtz.co) 
 * @copyright 2016-2019, Rogerio Taques (hello@abtz.co) 
 * @license MIT 
 * @version 2.1.1 
 */ 

 "use strict";!function(){function t(t,e){e=e||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),n}return"function"!=typeof window.CustomEvent&&(t.prototype=window.Event.prototype,void(window.CustomEvent=t))}();
"use strict";var seedFileUpload=function(){var e=function(e){e&&e.preventDefault();var t,i=!1,n=this,l=n.nextElementSibling;n.files&&n.files.length>1?i=(n.getAttribute("data-multiple")||"{count} files").replace("{count}",n.files.length):n.value.trim().length>0&&(i=n.value.split("\\").pop()),i&&(l.querySelector(".input").innerHTML=i),""!==n.value&&(t=new CustomEvent("file.chosen"),n.parentNode.classList.add("chosen"),n.dispatchEvent(t))},t=document.querySelectorAll('.seed-file > [type="file"]');null!==t&&t.forEach(function(t,i){var n=t.nextElementSibling,l=n.querySelector(".cancel"),o=t.getAttribute("data-empty")||"No file chosen";n&&(t.getAttribute("id")&&t.getAttribute("id")!==n.getAttribute("for")?n.setAttribute("for",t.getAttribute("id")):n.getAttribute("for")&&!t.getAttribute("id")?t.setAttribute("id",n.getAttribute("for")):(t.setAttribute("id","file-input-"+i),n.setAttribute("for","file-input-"+i)),l&&l.addEventListener("click",function(e){e&&e.preventDefault();var i=t.getAttribute("data-empty")||"No file chosen";t.value="",t.parentNode.classList.remove("chosen"),n.querySelector(".input").innerHTML=i,seedCustomEvent=new CustomEvent("file.removed"),t.dispatchEvent(seedCustomEvent)}),n.querySelector(".input").innerHTML=o,t.addEventListener("change",e))})};"undefined"!=typeof module?("undefined"==typeof module.exports.SeedCSS&&(module.exports.SeedCSS={}),module.exports.SeedCSS.fileUpload=seedFileUpload):("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.fileUpload=seedFileUpload);
"use strict";var fnOpen,fnClose,fnEsc,seedModal=function(e){var n={trigger:'[role="modal"]',classAnimation:{open:"bounceInDown",close:"bounceOutUp"}};e=Object.assign({},n,e);var o=document.querySelectorAll(".modal"),t=document.querySelectorAll(e.trigger);return fnClose=function(n){if(n){var o,t=document.querySelector("html"),d=n.querySelector(".modal-window");d&&(document.removeEventListener("keydown",fnEsc),d.classList.replace(e.classAnimation.open,e.classAnimation.close),n.classList.add("delay-1s"),n.classList.replace("fadeIn","fadeOut"),setTimeout(function(){o=new CustomEvent("modal.closed"),n.dispatchEvent(o),n.classList.add("hide"),t.style.overflow="",n.classList.remove("delay-1s","fadeOut"),d.classList.replace(e.classAnimation.close,e.classAnimation.open)},600))}},fnOpen=function(n){if(n){var o,t=document.querySelector("html"),d=n.querySelector(".modal-window");fnEsc=function(e){var o=e.keyCode||e.which;27===o&&fnClose(n)},d&&(document.addEventListener("keydown",fnEsc),n.style.display="",n.classList.add("animated","fadeIn","fast"),d.classList.add("animated",e.classAnimation.open),n.classList.remove("hide"),t.style.overflow="hidden",setTimeout(function(){o=new CustomEvent("modal.opened"),n.dispatchEvent(o)},100))}},null!==o&&o.forEach(function(e,n){var o=e.querySelectorAll('[role="modal-dismiss"]');e.addEventListener("click",function(){fnClose(e)}),e.show=function(){fnOpen(e)},e.hide=function(){fnClose(e)},null!==o&&o.forEach(function(n,o){n.addEventListener("click",function(n){n&&(n.preventDefault(),n.stopPropagation()),fnClose(e)})})}),null!==t&&t.forEach(function(e,n){e.addEventListener("click",function(n){n&&n.preventDefault();var o=e.getAttribute("data-modal-id");if(null!==o){var t=document.querySelector("#".concat(o));fnOpen(t)}})}),t=void 0,{get:function(e){if("string"==typeof e){var n=!1;return o.forEach(function(o){if(o.id===e.replace(/^#/,""))return void(n=o)}),n}return"undefined"!=typeof o[e]&&o[e]}}};"undefined"!=typeof module?("undefined"==typeof module.exports.SeedCSS&&(module.exports.SeedCSS={}),module.exports.SeedCSS.modal=seedModal):("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.modal=seedModal);
"use strict";var seedOffCanvas=function(){var e=function(e,n){var t,o=document.querySelector("#".concat(e.replace(/^#/,""))),a=n||document.querySelector('[role="offcanvas"][data-id="'.concat(e.replace(/^#/,""),'"]'));null!==o&&(o.classList.toggle("open"),o.classList.contains("open")?(null!==a&&a.classList.add("triggered"),document.querySelector("html").style.overflow="hidden"):(document.querySelectorAll('[role="offcanvas"][data-id="'.concat(e.replace(/^#/,""),'"]')).forEach(function(e){e.classList.remove("triggered")}),document.querySelector("html").style.overflow=""),setTimeout(function(){t=o.classList.contains("open")?new CustomEvent("canvas.opened"):new CustomEvent("canvas.closed"),o.dispatchEvent(t)},300))},n=function(n){n&&n.preventDefault(),e(n.currentTarget.getAttribute("data-id")||"offcanvas",n.currentTarget)},t=document.querySelectorAll('[role="offcanvas"]'),o=document.querySelectorAll(".offcanvas");return null!==t&&t.forEach(function(e,t){e.addEventListener("click",n)}),null!==o&&o.forEach(function(n,t){n.open=function(){e(n.getAttribute("id")||"offcanvas")},n.close=function(){}}),{get:function(e){if("string"==typeof e){var n=!1;return o.forEach(function(t){if(t.id===e.replace(/^#/,""))return void(n=t)}),n}return"undefined"!=typeof canvas[e]&&canvas[e]}}};"undefined"!=typeof module?("undefined"==typeof module.exports.SeedCSS&&(module.exports.SeedCSS={}),module.exports.SeedCSS.offCanvas=seedOffCanvas):("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.offCanvas=seedOffCanvas);
"use strict";var seedScroll=function(e){var t=null,n=null,o=0,i=50,l={spyScrollSelector:"nav a.smooth",revealElementSelector:".reveal",revealSpaceOffset:.2,revealWhenVisible:"visible",revealSingleAnimation:"visible-once",revealWhenHidden:"hidden"},r=function(e){t.forEach(function(e){e.classList.remove("active")}),e&&e.classList.add("active")},d=function(e){var t=document.body.getBoundingClientRect(),n=e.getBoundingClientRect();return{top:Math.ceil(n.top-t.top),left:Math.ceil(n.left-t.left)}},c=function(e){if(window.scrollY===o){var n=new CustomEvent("scroll.complete");document.dispatchEvent(n)}if(t){var l=d(t[0]);window.scrollY<l.top&&r(),t.forEach(function(e,t){try{var n=e.getAttribute("href")||e.getAttribute("data-target"),o=document.querySelector(n),l=d(o);if(l.top-i<=window.scrollY)return void r(e)}catch(c){}})}"function"==typeof window.oldOnscroll&&window.oldOnscroll(e)},a=function(e){e&&e.preventDefault();var t=e.currentTarget.getAttribute("href")||e.currentTarget.getAttribute("data-target");if(t){var n=document.querySelector(t);o=d(n).top-i,window.scrollTo({behavior:"smooth",left:0,top:o})}},s=function(){var t=function(){return{width:window.document.documentElement.clientWidth,height:window.document.documentElement.clientHeight}},o=function(){return{x:window.pageXOffset,y:window.pageYOffset}},i=function(e){var t=e,n=0,o=0,i=t.offsetWidth,l=t.offsetHeight;do isNaN(t.offsetTop)||(n+=t.offsetTop),isNaN(t.offsetLeft)||(o+=t.offsetLeft);while(null!==(t=t.offsetParent));return{top:n,left:o,height:l,width:i}},l=function(n){var l=t(),r=o(),d=i(n),c=e.revealSpaceOffset,a=function(){var e=d.top+d.height*c,t=d.left+d.width*c,n=d.left+d.width-d.width*c,o=d.top+d.height-d.height*c,i=r.y+0,a=r.x+0,s=r.y-0+l.height,f=r.x-0+l.width;return e<s&&o>i&&t>a&&n<f};return a()},r=function(){if(n)for(var t=0;t<n.length;t+=1)l(n[t])?(e.revealWhenVisible&&n[t].classList.add(e.revealWhenVisible),e.revealWhenHidden&&n[t].classList.remove(e.revealWhenHidden)):n[t].classList.contains(e.revealSingleAnimation)===!1&&(e.revealWhenHidden&&n[t].classList.add(e.revealWhenHidden),e.revealWhenVisible&&n[t].classList.remove(e.revealWhenVisible))},d=function(e){r()};window.addEventListener("scroll",d,!1),window.addEventListener("resize",d,!1)};return window.oldOnscroll=window.onscroll,window.onscroll=c,e=Object.assign({},l,e),t=document.querySelectorAll(e.spyScrollSelector),n=document.querySelectorAll(e.revealElementSelector),null!==t&&t.forEach(function(e,t){e.addEventListener("click",a)}),n&&s(),{}};"undefined"!=typeof module?("undefined"==typeof module.exports.SeedCSS&&(module.exports.SeedCSS={}),module.exports.SeedCSS.scroll=seedScroll):("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.scroll=seedScroll);
"use strict";var seedTextarea=function(){var e=document.querySelectorAll(".field > textarea");null!==e&&e.forEach(function(e,t){var a=0,r=e.parentNode,n=r.querySelector('[role="counter"]'),d=n.getAttribute("data-template")||"Typed %a out of %b. Remaining %c.",o=function(){var t=e.value.replace(/[\n\r]/g,"").length,r=a-t,o=Math.floor(.1*a);n.innerHTML=d.replace("%a",t).replace("%b",a).replace("%c",r<=o?'<span class="red" >'.concat(r,"</span>"):r)};a=e.getAttribute("maxlength"),a&&(a=parseInt(a),"keypress keydown keyup".split(" ").forEach(function(t){e.addEventListener(t,o,!0)}),o())})};"undefined"!=typeof module?("undefined"==typeof module.exports.SeedCSS&&(module.exports.SeedCSS={}),module.exports.SeedCSS.textArea=seedTextarea):("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.textArea=seedTextarea);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
