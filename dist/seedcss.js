/** 
 * Seed CSS (seed-css) 
 * A light-weight, mobile first and responsive CSS boilerplate. 
 * @author Rogerio Taques (hello@abtz.co) 
 * @copyright 2016-2018, Rogerio Taques (hello@abtz.co) 
 * @license MIT 
 * @version 2.0.2 
 */ 

 "use strict";!function(){function t(t,e){e=e||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),n}return"function"!=typeof window.CustomEvent&&(t.prototype=window.Event.prototype,void(window.CustomEvent=t))}();
"use strict";var seedFileUpload=function(){var e=function(e){e&&e.preventDefault();var t,i=!1,n=this,l=n.nextElementSibling;n.files&&n.files.length>1?i=(n.getAttribute("data-multiple")||"{count} files").replace("{count}",n.files.length):n.value.trim().length>0&&(i=n.value.split("\\").pop()),i&&(l.querySelector(".input").innerHTML=i),""!==n.value&&(t=new CustomEvent("file.chosen"),n.parentNode.classList.add("chosen"),n.dispatchEvent(t))},t=document.querySelectorAll('.seed-file > [type="file"]');null!==t&&t.forEach(function(t,i){var n=t.nextElementSibling,l=n.querySelector(".cancel"),o=t.getAttribute("data-empty")||"No file chosen";n&&(t.getAttribute("id")&&t.getAttribute("id")!==n.getAttribute("for")?n.setAttribute("for",t.getAttribute("id")):n.getAttribute("for")&&!t.getAttribute("id")?t.setAttribute("id",n.getAttribute("for")):(t.setAttribute("id","file-input-"+i),n.setAttribute("for","file-input-"+i)),l&&l.addEventListener("click",function(e){e&&e.preventDefault();var i=t.getAttribute("data-empty")||"No file chosen";t.value="",t.parentNode.classList.remove("chosen"),n.querySelector(".input").innerHTML=i,seedCustomEvent=new CustomEvent("file.removed"),t.dispatchEvent(seedCustomEvent)}),n.querySelector(".input").innerHTML=o,t.addEventListener("change",e))})};"undefined"!=typeof module?("undefined"==typeof module.exports.SeedCSS&&(module.exports.SeedCSS={}),module.exports.SeedCSS.fileUpload=seedFileUpload):("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.fileUpload=seedFileUpload);
"use strict";var fnOpen,fnClose,fnEsc,seedModal=function(e){var n={trigger:'[role="modal"]',classAnimation:{open:"flipInX",close:"flipOutX"}};e=Object.assign({},n,e);var t=document.querySelectorAll(".modal"),o=document.querySelectorAll(e.trigger);return fnClose=function(n){if(n){var t,o=document.querySelector("html"),d=n.querySelector(".modal-window");d&&(document.removeEventListener("keydown",fnEsc),d.classList.replace(e.classAnimation.open,e.classAnimation.close),n.classList.add("delay-1s"),n.classList.replace("fadeIn","fadeOut"),setTimeout(function(){t=new CustomEvent("modal.closed"),n.dispatchEvent(t),n.classList.add("hide"),o.style.overflow="",n.classList.remove("delay-1s","fadeOut"),d.classList.replace(e.classAnimation.close,e.classAnimation.open)},600))}},fnOpen=function(n){if(n){var t,o=document.querySelector("html"),d=n.querySelector(".modal-window");fnEsc=function(e){var t=e.keyCode||e.which;27===t&&fnClose(n)},d&&(document.addEventListener("keydown",fnEsc),n.style.display="",n.classList.add("animated","fadeIn","fast"),d.classList.add("animated",e.classAnimation.open),n.classList.remove("hide"),o.style.overflow="hidden",setTimeout(function(){t=new CustomEvent("modal.opened"),n.dispatchEvent(t)},100))}},null!==t&&t.forEach(function(e,n){var t=e.querySelectorAll('[role="modal-dismiss"]');e.addEventListener("click",function(){fnClose(e)}),e.show=function(){fnOpen(e)},e.hide=function(){fnClose(e)},null!==t&&t.forEach(function(n,t){n.addEventListener("click",function(n){n&&(n.preventDefault(),n.stopPropagation()),fnClose(e)})})}),null!==o&&o.forEach(function(e,n){e.addEventListener("click",function(n){n&&n.preventDefault();var t=e.getAttribute("data-modal-id");if(null!==t){var o=document.querySelector("#".concat(t));fnOpen(o)}})}),o=void 0,{get:function(e){if("string"==typeof e){var n=!1;return t.forEach(function(t){if(t.id===e.replace(/^#/,""))return void(n=t)}),n}return"undefined"!=typeof t[e]&&t[e]}}};"undefined"!=typeof module?("undefined"==typeof module.exports.SeedCSS&&(module.exports.SeedCSS={}),module.exports.SeedCSS.modal=seedModal):("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.modal=seedModal);
"use strict";var seedOffCanvas=function(){var e=function(e,n){var t,o=document.querySelector("#".concat(e.replace(/^#/,""))),a=n||document.querySelector('[role="offcanvas"][data-id="'.concat(e.replace(/^#/,""),'"]'));null!==o&&(o.classList.toggle("open"),o.classList.contains("open")?(null!==a&&a.classList.add("triggered"),document.querySelector("html").style.overflow="hidden"):(document.querySelectorAll('[role="offcanvas"][data-id="'.concat(e.replace(/^#/,""),'"]')).forEach(function(e){e.classList.remove("triggered")}),document.querySelector("html").style.overflow=""),setTimeout(function(){t=o.classList.contains("open")?new CustomEvent("canvas.opened"):new CustomEvent("canvas.closed"),o.dispatchEvent(t)},300))},n=function(n){n&&n.preventDefault(),e(n.currentTarget.getAttribute("data-id")||"offcanvas",n.currentTarget)},t=document.querySelectorAll('[role="offcanvas"]'),o=document.querySelectorAll(".offcanvas");return null!==t&&t.forEach(function(e,t){e.addEventListener("click",n)}),null!==o&&o.forEach(function(n,t){n.open=function(){e(n.getAttribute("id")||"offcanvas")},n.close=function(){}}),{get:function(e){if("string"==typeof e){var n=!1;return o.forEach(function(t){if(t.id===e.replace(/^#/,""))return void(n=t)}),n}return"undefined"!=typeof canvas[e]&&canvas[e]}}};"undefined"!=typeof module?("undefined"==typeof module.exports.SeedCSS&&(module.exports.SeedCSS={}),module.exports.SeedCSS.offCanvas=seedOffCanvas):("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.offCanvas=seedOffCanvas);
"use strict";var seedScroll=function(e){var t=null,o=0,n=50,l={spyScrollContainer:"nav",spyScroll:"a.smooth",revealWhenVisible:".reveal"},r=function(e){t.forEach(function(e){e.classList.remove("active")}),e&&e.classList.add("active")},c=function(e){var t=document.body.getBoundingClientRect(),o=e.getBoundingClientRect();return{top:Math.ceil(o.top-t.top),left:Math.ceil(o.left-t.left)}},i=function(e){if(window.scrollY===o){var l=new CustomEvent("scroll.complete");document.dispatchEvent(l)}if(t){var i=c(t[0]);window.scrollY<i.top&&r(),t.forEach(function(e,t){var o=e.getAttribute("href")||e.getAttribute("data-target"),l=document.querySelector(o),i=c(l);if(i.top-n<=window.scrollY)return void r(e)})}"function"==typeof window.oldOnscroll&&window.oldOnscroll(e)},d=function(e){e&&e.preventDefault();var t=e.currentTarget.getAttribute("href")||e.currentTarget.getAttribute("data-target");if(t){var l=document.querySelector(t);o=c(l).top-n,window.scrollTo({behavior:"smooth",left:0,top:o})}};window.oldOnscroll=window.onscroll,window.onscroll=i,e=Object.assign({},l,e),t=document.querySelectorAll(e.spyScroll),null!==t&&t.forEach(function(e,t){e.addEventListener("click",d)})};"undefined"!=typeof module?("undefined"==typeof module.exports.SeedCSS&&(module.exports.SeedCSS={}),module.exports.SeedCSS.scroll=seedScroll):("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.scroll=seedScroll);
"use strict";var seedTextarea=function(){var e=document.querySelectorAll(".field > textarea");null!==e&&e.forEach(function(e,t){var a=0,r=e.parentNode,n=r.querySelector('[role="counter"]'),d=n.getAttribute("data-template")||"Typed %a out of %b. Remaining %c.",o=function(){var t=e.value.replace(/[\n\r]/g,"").length,r=a-t,o=Math.floor(.1*a);n.innerHTML=d.replace("%a",t).replace("%b",a).replace("%c",r<=o?'<span class="red" >'.concat(r,"</span>"):r)};a=e.getAttribute("maxlength"),a&&(a=parseInt(a),"keypress keydown keyup".split(" ").forEach(function(t){e.addEventListener(t,o,!0)}),o())})};"undefined"!=typeof module?("undefined"==typeof module.exports.SeedCSS&&(module.exports.SeedCSS={}),module.exports.SeedCSS.textArea=seedTextarea):("undefined"==typeof window.SeedCSS&&(window.SeedCSS={}),window.SeedCSS.textArea=seedTextarea);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
