/**
 * Seed CSS - Mixins
 * @version 2.2.0
 */

@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px: ();
  $rem: ();

  @each $value in $values {
    @if $value == 0 or $value == auto {
      $px: append($px, $value);
      $rem: append($rem, $value);
    } @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == 'px' {
        $px: append($px, $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == 'rem' {
        $px: append($px, ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

@mixin grid-make-cols($size) {
  @for $i from 1 through 12 {
    &.#{$size}-#{$i} {
      @if $i == 12 {
        width: 100%;
      } @else if $i == 1 {
        width: calc(100% / 12);
      } @else {
        width: calc(100% / 12 * #{$i});
      }
    }
  }

  @for $i from 1 through 12 {
    &.#{$size}-offset-#{$i} {
      @if $i == 12 {
        margin-left: 100%;
      } @else if $i == 1 {
        margin-left: calc(100% / 12);
      } @else {
        margin-left: calc(100% / 12 * #{$i});
      }
    }
  }
}

@mixin elem-make-spacing() {
  $cases: 'm', 'p';
  $max: 50;
  $step: 5;

  @each $case in $cases {
    @for $i from 0 through $max {
      &.#{$case}-#{$i} {
        @if $case == 'm' {
          margin: #{$i + px} !important;
        } @else {
          padding: #{$i + px} !important;
        }
      }

      $i: $i + $step;
    }

    @for $i from 0 through $max {
      &.#{$case}x-#{$i} {
        @if $case == 'm' {
          margin: {
            left: #{$i + px} !important;
            right: #{$i + px} !important;
          }
        } @else {
          padding: {
            left: #{$i + px} !important;
            right: #{$i + px} !important;
          }
        }
      }

      $i: $i + $step;
    }

    @for $i from 0 through $max {
      &.#{$case}y-#{$i} {
        @if $case == 'm' {
          margin: {
            top: #{$i + px} !important;
            bottom: #{$i + px} !important;
          }
        } @else {
          padding: {
            top: #{$i + px} !important;
            bottom: #{$i + px} !important;
          }
        }
      }

      $i: $i + $step;
    }

    @for $i from 0 through $max {
      &.#{$case}l-#{$i} {
        @if $case == 'm' {
          margin-left: #{$i + px} !important;
        } @else {
          padding-left: #{$i + px} !important;
        }
      }

      $i: $i + $step;
    }

    @for $i from 0 through $max {
      &.#{$case}t-#{$i} {
        @if $case == 'm' {
          margin-top: #{$i + px} !important;
        } @else {
          padding-top: #{$i + px} !important;
        }
      }

      $i: $i + $step;
    }

    @for $i from 0 through $max {
      &.#{$case}r-#{$i} {
        @if $case == 'm' {
          margin-right: #{$i + px} !important;
        } @else {
          padding-right: #{$i + px} !important;
        }
      }

      $i: $i + $step;
    }

    @for $i from 0 through $max {
      &.#{$case}b-#{$i} {
        @if $case == 'm' {
          margin-bottom: #{$i + px} !important;
        } @else {
          padding-bottom: #{$i + px} !important;
        }
      }

      $i: $i + $step;
    }
  }
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

@mixin transition($prop, $time, $animation) {
  -webkit-transition: $prop $time $animation;
  -moz-transition: $prop $time $animation;
  -ms-transition: $prop $time $animation;
  -o-transition: $prop $time $animation;
  transition: $prop $time $animation;
}

@mixin transition-delay($timing) {
  -webkit-transition-delay: $timing;
  -moz-transition-delay: $timing;
  -ms-transition-delay: $timing;
  -o-transition-delay: $timing;
  transition-delay: $timing;
}

@mixin transform($prop) {
  -webkit-transform: $prop;
  -moz-transform: $prop;
  -ms-transformn: $prop;
  -o-transform: $prop;
  transform: $prop;
}

@mixin box-shadow($value) {
  -webkit-box-shadow: $value;
  -moz-box-shadow: $value;
  -ms-box-shadow: $value;
  -o-box-shadow: $value;
  box-shadow: $value;
}

@mixin appearance($value) {
  -webkit-appearance: $value;
  -moz-appearance: $value;
  -ms-appearance: $value;
  -o-appearance: $value;
  appearance: $value;
}

@mixin animation($name, $duration: 0.5s, $easing: linear, $delay: '') {
  -webkit-animation: $name $duration #{$delay} $easing;
  -moz-animation: $name $duration #{$delay} $easing;
  -ms-animation: $name $duration #{$delay} $easing;
  -o-animation: $name $duration #{$delay} $easing;
  animation: $name $duration #{$delay} $easing;
}

@mixin animation-duration($duration: 0.5s) {
  -webkit-animation-duration: $duration;
  -moz-animation-duration: $duration;
  -ms-animation-duration: $duration;
  -o-animation-duration: $duration;
  animation-duration: $duration;
}

@mixin animation-delay($delay) {
  -webkit-animation-delay: $delay;
  -moz-animation-delay: $delay;
  -ms-animation-delay: $delay;
  -o-animation-delay: $delay;
  animation-delay: $delay;
}

@mixin animation-iteration-count($count) {
  -webkit-animation-iteration-count: $count;
  -moz-animation-iteration-count: $count;
  -ms-animation-iteration-count: $count;
  -o-animation-iteration-count: $count;
  animation-iteration-count: $count;
}

@mixin blur($noise: 1px) {
  /* Prefixed CSS3 blur filters */
  -webkit-filter: blur($noise);
  -moz-filter: blur($noise);
  -o-filter: blur($noise);
  -ms-filter: blur($noise);
  filter: url(#blur); /* Firefox needs SVG */
  filter: blur($noise); /* Someday, sigh ... */
}
